from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

rf_model = RandomForestRegressor(
    n_estimators=500,      
    max_depth=20,          
    min_samples_split=5,    
    min_samples_leaf=2,     
    max_features='sqrt',    
    max_samples=0.8,       
    random_state=42,
    n_jobs=-1
)

rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_test)

import matplotlib.pyplot as plt
import seaborn as sns

importance = rf_model.feature_importances_
feature_importance = sorted(zip(X.columns, importance), key=lambda x: x[1], reverse=True)

plt.figure(figsize=(10,6))
sns.barplot(x=[x[1] for x in feature_importance], y=[x[0] for x in feature_importance])
plt.xlabel("Feature Importance Score")
plt.ylabel("Features")
plt.title("Feature Importance in Random Forest")
plt.show()

from sklearn.feature_selection import SelectFromModel
sfm = SelectFromModel(rf_model, threshold=0.005)  
sfm.fit(X_train, y_train)


selected_features = X_train.columns[sfm.get_support()]
print("Selected Features:", selected_features)
X_train_selected = sfm.transform(X_train)
X_test_selected = sfm.transform(X_test)

rf_model.fit(X_train_selected, y_train)      
y_pred_rf = rf_model.predict(X_train_selected)           

mse_rf = mean_squared_error(y_train, y_pred_rf)
rmse_rf = np.sqrt(mse_rf)
print(f"Random Forest MSE: {mse_rf:.4f}")
print(f"Random Forest RMSE: {rmse_rf:.4f}")
